openapi: 3.1.0
info:
  title: Wanton API
  version: 1.0.0
servers:
  - url: https://dev.wanton.app
tags:
  - name: Project
paths:
  /v0/healthcheck:
    get:
      tags:
        - Healthcheck
      summary: Health check
      description: Returns a message indicating the service status.
      responses:
        "200":
          description: Service is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "available"
                  system_info:
                    type: object
                    properties:
                      environment:
                        type: string
                        example: "development"
                      version:
                        type: string
                        example: "1.0.0"

  # Project endpoint
  /v0/project:
    post:
      tags:
        - Project
      summary: Create Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectRequest"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: "#/components/schemas/ProjectResponse"

    get:
      tags:
        - Project
      summary: List Projects
      parameters:
        - name: bbox
          in: query
          required: false
          schema:
            type: string
          example: "-79.513256,40.511408,-78.382562,45.747538"
          description: Bounding box to filter projects. Format - bbox=west,south,east,north
        - name: name
          in: query
          required: false
          schema:
            type: string
          example: "Avenue"
          description: string pattern to filter projects. - 'Avenue' matches name containing 'Avenue'
        - name: status
          in: query
          required: false
          schema:
            type: string
          example: "In Progress"
          description: string pattern to filter projects. - 'In Progress' matches status containing 'In Progress'
        - name: project_id
          in: query
          required: false
          schema:
            type: integer
          example: 24
          description: integer pattern to filter projects. - 24 matches project IDs containing 24
        - name: proposal_id
          in: query
          required: false
          schema:
            type: string
          example: "P00"
          description: string pattern to filter projects. - 'P00' matches proposal IDs containing 'P00'
        - name: full_address
          in: query
          required: false
          schema:
            type: string
          example: "Toronto"
          description: string pattern to filter projects. - 'Toronto' matches full address containing 'Toronto'
        - name: client_name
          in: query
          required: false
          schema:
            type: string
          example: "Corp"
          description: string pattern to filter projects. - 'Corp' matches client name containing 'Corp'
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
          example: "100"
          description: The number of items per page.
        - name: page
          in: query
          required: false
          schema:
            type: integer
          example: "1"
          description: The page number to retrieve.
        - name: sort
          in: query
          required: false
          schema:
            type: string
          example: "-project_id"
          description: project_id, -project_id
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/Metadata"
                  prjects:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProjectResponse"

  /v0/project/{project_id}:
    get:
      tags:
        - Project
      summary: Read Project
      description: Read an existing project by ID.
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 24001
      responses:
        "200":
          description: A project object
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: "#/components/schemas/ProjectResponse"
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "the requested resource could not be found"

    patch:
      tags:
        - Project
      summary: Update Project
      description: update an existing project by ID.
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 24001
      requestBody:
        description: partial project object - all fields are optional
        content:
          application/json:
            schema:
              type: object
              example:
                project_id: 24002
                proposal_id: P002-24
                name: Otester, Ontario L0L 2E0
                status: In Progress
                client_names:
                  - Skynet
                  - Acme
                feature:
                  type: Feature
                  geometry:
                    type: Point
                    coordinates:
                      - -79.384743
                      - 43.669624
                  properties:
                    name: Otester
                    full_address: Otester, Ontario L0L 2E0
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: "#/components/schemas/ProjectResponse"
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "the requested resource could not be found"

    delete:
      tags:
        - Project
      summary: Delete Project
      description: delete an existing project by ID.
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "project successfully deleted"
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "the requested resource could not be found"

  # Client endpoint
  /v0/client:
    post:
      tags:
        - Client
      summary: Create Client
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientResponse"

    get:
      tags:
        - Client
      summary: List Clients
      description: Retrieve a list of clients along with metadata.
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 1
          description: The page number to retrieve.
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
            example: 10
          description: The number of items per page.
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/Metadata"
                  clients:
                    type: array
                    items:
                      $ref: "#/components/schemas/ClientResponse"

  /v0/client/{client_id}:
    get:
      tags:
        - Client
      summary: Read a client
      description: Read an existing client by ID.
      parameters:
        - name: client_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientResponse"
        "404":
          description: Client not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "the requested resource could not be found"

    patch:
      tags:
        - Client
      summary: Update Client
      description: Update an existing client by ID.
      parameters:
        - name: client_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: partial client object to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  type: string
                  example: "Contact, 123-456-7890"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  client:
                    $ref: "#/components/schemas/ClientResponse"
        "404":
          description: Client not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "the requested resource could not be found"

    delete:
      tags:
        - Client
      summary: Delete Client
      description: Delete an existing client by ID.
      parameters:
        - name: client_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 2
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "client successfully deleted"
        "404":
          description: Client not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "the requested resource could not be found"

  # User endpoint
  /v0/user:
    post:
      tags:
        - User
      summary: Register a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/UserResponse"

  /v0/user/activate:
    put:
      tags:
        - User
      summary: Activate a user using token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserActivationRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/UserActivationResponse"

  /v0/user/authenticate:
    post:
      tags:
        - User
      summary: Authenticate a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAuthenticationRequest"
      responses:
        "202":
          description: Successful response - Accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAuthenticationResponse"

  /v0/user/refresh:
    get:
      tags:
        - User
      summary: Refresh access_token
      description: Refresh access_token using refresh_token cookie
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAuthenticationResponse"

  /v0/user/logout:
    get:
      tags:
        - User
      summary: logout
      description: log a user out by expiring refresh_token cookie
      responses:
        "202":
          description: Successful response - Accepted

  # Role endpoint
  /v0/role:
    post:
      tags:
        - Role
      summary: Create a role
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleRequest"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/RoleResponse"
                    
    get:
      tags:
        - Role
      summary: List Roles
      description: Retrieve a list of roles along with metadata.
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/Metadata"
                  roles:
                    type: array
                    items:
                      $ref: "#/components/schemas/RoleResponse"

  /v0/role/{role_id}:
    get:
      tags:
        - Role
      summary: Read a role
      description: Read an existing role by ID.
      parameters:
        - name: role_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleResponse"
        "404":
          description: Role not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "the requested resource could not be found"

    patch:
      tags:
        - Role
      summary: Update a role
      description: update an existing role by ID.
      parameters:
        - name: role_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      requestBody:
        # description: partial project object - all fields are optional
        content:
          application/json:
            schema:
              type: object
              example:
                name: Drafter
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: "#/components/schemas/RoleResponse"
        "404":
          description: Role not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "the requested resource could not be found"   

    delete:
      tags:
        - Role
      summary: Delete a role
      description: delete an existing role by ID.
      parameters:
        - name: role_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "role successfully deleted"
        "404":
          description: Role not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "the requested resource could not be found"

  # Activity endpoint
  /v0/activity:
    post:
      tags:
        - Activity
      summary: Create an activity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityRequest"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/ActivityResponse"

    get:
      tags:
        - Activity
      summary: List activities
      description: Retrieve a list of activities along with metadata.
      parameters:
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
          example: 10
          description: The number of items per page.
        - name: page
          in: query
          required: false
          schema:
            type: integer
          example: 1
          description: The page number to retrieve.
        - name: sort
          in: query
          required: false
          schema:
            type: string
          example: "-id"
          description: id(default), -id
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/Metadata"
                  activities:
                    type: array
                    items:
                      $ref: "#/components/schemas/ActivityResponse"

  /v0/activity/{activity_id}:
    get:
      tags:
        - Activity
      summary: Read an activity
      description: Read an existing activity by ID.
      parameters:
        - name: activity_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityResponse"
        "404":
          description: Activity not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "the requested resource could not be found"

    patch:
      tags:
        - Activity
      summary: Update an activity
      description: update an existing activity by ID.
      parameters:
        - name: activity_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      requestBody:
        # description: partial project object - all fields are optional
        content:
          application/json:
            schema:
              type: object
              example:
                name: "Meeting"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: "#/components/schemas/ActivityResponse"
        "404":
          description: Activity not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "the requested resource could not be found"   

    delete:
      tags:
        - Activity
      summary: Delete an activity
      description: delete an existing activity by ID.
      parameters:
        - name: activity_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "activity successfully deleted"
        "404":
          description: Activity not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "the requested resource could not be found"

  # Timesheet endpoint
  /v0/timesheet:
    post:
      tags:
        - Timesheet
      summary: Create a timesheet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimesheetRequest"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  timesheet:
                    $ref: "#/components/schemas/TimesheetResponse"

    get:
      tags:
        - Timesheet
      summary: List timesheets
      description: Retrieve a list of timesheets along with metadata.
      parameters:
        - name: email
          in: query
          required: false
          schema:
            type: string
          example: "yondu@yondumail.com"
          description: string pattern to filter timesheets.
        - name: first_name
          in: query
          required: false
          schema:
            type: string
          example: "Yondu"
          description: string pattern to filter timesheets.
        - name: last_name
          in: query
          required: false
          schema:
            type: string
          example: "Udonta"
          description: string pattern to filter timesheets.
        - name: project_id
          in: query
          required: false
          schema:
            type: integer
          example: 24010
          description: project id to filter timesheets.
        - name: project_name
          in: query
          required: false
          schema:
            type: string
          example: "Pineview"
          description: string pattern to filter timesheets.
        - name: activity_id
          in: query
          required: false
          schema:
            type: integer
          example: 1
          description: activity id to filter timesheets.
        - name: activity_name
          in: query
          required: false
          schema:
            type: string
          example: "Design"
          description: string pattern to filter timesheets.
        - name: work_date
          in: query
          required: false
          schema:
            type: string
          example: "2025-01-01"
          description: date(YYYY-MM-DD) to filter timesheets.
        - name: from_date
          in: query
          required: false
          schema:
            type: string
          example: "2025-01-01"
          description: start date(YYYY-MM-DD) of the date range(inclusive) to filter timesheets.
        - name: to_date
          in: query
          required: false
          schema:
            type: string
          example: "2025-01-02"
          description: end date(YYYY-MM-DD) of the date range(inclusive) to filter timesheets.
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
          example: 10
          description: The number of items per page.
        - name: page
          in: query
          required: false
          schema:
            type: integer
          example: 1
          description: The page number to retrieve.
        - name: sort
          in: query
          required: false
          schema:
            type: string
          example: "-id"
          description: id(default), -id, project_id, -project_id, work_date, -work_date
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: "#/components/schemas/Metadata"
                  timesheets:
                    type: array
                    items:
                      $ref: "#/components/schemas/TimesheetResponse"

  /v0/timesheet/{timesheet_id}:
    get:
      tags:
        - Timesheet
      summary: Read a timesheet
      description: Read an existing timesheet by ID.
      parameters:
        - name: timesheet_id
          in: path
          required: true
          schema:
            type: string
            example: "01JRQAZDX24JTBZTTFBDHH1Z7D"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimesheetResponse"
        "404":
          description: Timesheet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "the requested resource could not be found"

    patch:
      tags:
        - Timesheet
      summary: Update a timesheet
      description: update an existing timesheet by ID.
      parameters:
        - name: timesheet_id
          in: path
          required: true
          schema:
            type: string
            example: "01JRQAZDX24JTBZTTFBDHH1Z7D"
      requestBody:
        description: partial timsheet object - all fields are optional
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: integer
                  example: 24403
                client_id:
                  type: integer
                  example: 1
                activity_id:
                  type: integer
                  example: 21
                work_date:
                  type: string
                  example: "2025-01-01"
                work_mins:
                  type: integer
                  example: 360
                description:
                  type: string
                  example: "Designing Bifrost"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: "#/components/schemas/TimesheetResponse"
        "404":
          description: Timesheet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "the requested resource could not be found"

    delete:
      tags:
        - Timesheet
      summary: Delete a timesheet
      description: delete an existing timesheet by ID.
      parameters:
        - name: timesheet_id
          in: path
          required: true
          schema:
            type: string
            example: "01JRQAZDX24JTBZTTFBDHH1Z7D"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "timesheet successfully deleted"
        "404":
          description: Timesheet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "the requested resource could not be found"

components:
  schemas:
    Image:
      type: array
      items:
        type: string
      example:
        - "https://wantoni-image-bucket.s3.us-east-1.amazonaws.com/24415/AAAABThJwoKauwjlFX65FutF8MqqiQzWU4jIFTZpdzZ7ql7rx77tcsMHXRlY77eMrgbOuy78i8XIPKP-SY6Gsy_n2J_ulMBLT0Dm_rtQlOTs-DrCaBDcvF6BYJifHA.jpg"
        - "https://wantoni-image-bucket.s3.us-east-1.amazonaws.com/24415/spongebob-squarepants-patrick-vector.jpg" 

    Feature:
      type: object
      properties:
        type:
          type: string
          example: "Feature"
        geometry:
          type: object
          properties:
            type:
              type: string
              example: "Point"
            coordinates:
              type: array
              items:
                type: number
                format: float
              example: [-79.727796, 43.781326]
        properties:
          type: object
          properties:
            name:
              type: string
              example: "Parliament Hill Place"
            full_address:
              type: string
              example: "Parliament Hill Place, Brampton, Ontario L6P 1S8, Canada"

    ClientRequest:
      type: object
      required:
        - name
        - address
        - logo_url
        - note
      properties:
        name:
          type: string
          example: "Acme"
        address:
          type: string
          example: "123 Acme Street"
        logo_url:
          type: string
          example: "http://acmelogos.com/images/logo-3.svg"
        note:
          type: string
          example: "Victor Boniface, 123-567-2345"

    ClientResponse:
      type: object
      properties:
        id:
          type: integer
          example: 7
        name:
          type: string
          example: "Homelife Today Realty"
        logo_url:
          type: string
          example: "https://image.pngaaa.com/189/734189-middle.png"
        address:
          type: string
          example: "1234 Yondu Road"
        note:
          type: string
          example: "Yondu Udonta, 123-456-5003"
        version:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2024-10-08T11:44:41Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-10-08T11:44:41Z"

    Metadata:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        page_size:
          type: integer
          example: 10
        first_page:
          type: integer
          example: 1
        last_page:
          type: integer
          example: 1
        total_records:
          type: integer
          example: 10
    
    Assignment:
      type: object
      properties:
        employee_id:
          type: string
          example: "kznbv0nd"
        role_id:
          type: integer
          example: 1

    ProjectRequest:
      type: object
      properties:
        project_id:
          type: integer
          example: 24403
        proposal_id:
          type: string
          example: "P403-24"
        name:
          type: string
          example: "Pineview Corner"
        status:
          type: string
          example: "Pending"
        client_names:
          type: array
          items:
            type: string
          example: ["Yondu Industry", "Homelife Today Realty"]
        feature:
          $ref: '#/components/schemas/Feature'
        images:
          $ref: '#/components/schemas/Image'
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/Assignment'

    ProjectResponse:
      type: object
      properties:
        project_id:
          type: integer
          example: 24001
        proposal_id:
          type: string
          example: "P001-24"
        name:
          type: string
          example: "orillia street, ottawa, ontario k1h 7n7, canada"
        status:
          type: string
          example: "Pending"
        clients:
          type: array
          items:
            $ref: "#/components/schemas/ClientResponse"
        feature:
          $ref: "#/components/schemas/Feature"
        images:
          $ref: '#/components/schemas/Image'
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/Assignment'
        version:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T16:10:55Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T16:10:55Z"

    UserRequest:
      type: object
      required:
        - first_name
        - last_name
        - email
        - password
      properties:
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        email:
          type: string
          example: "johndoe@email.com"
        password:
          type: string
          example: "SuperSecretPassword!"

    UserResponse:
      type: object
      properties:
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        email:
          type: string
          example: "johndoe@email.com"
        activated:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T16:10:55Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T16:10:55Z"

    UserActivationRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: "QU4FJR5N6WSYUSYBTDRCPZZ3YU"

    UserActivationResponse:
      type: object
      properties:
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        email:
          type: string
          example: "johndoe@email.com"
        activated:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T16:10:55Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T16:10:55Z"

    UserAuthenticationRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: "johndoe@email.com"
        password:
          type: string
          example: "SuperSecretPassword!"

    UserAuthenticationResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "ey..."

    RoleRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Drafter"

    RoleResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Drafter"
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T16:10:55Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T16:10:55Z"

    ActivityRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Meeting"

    ActivityResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Meeting"
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T16:10:55Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T16:10:55Z"

    TimesheetRequest:
      type: object
      required:
        - user_id
        - project_id
        - client_id
        - activity_id
        - work_date
        - work_mins
      properties:
        user_id:
          type: string
          example: "b1lpu5hm"
        project_id:
          type: integer
          example: 24403
        client_id:
          type: integer
          example: 1
        activity_id:
          type: integer
          example: 1
        work_date:
          type: string
          example: "2025-01-01"
        work_mins:
          type: integer
          example: 360
        description:
          type: string
          example: "Find something else more interesting fall asleep on the washing machine be superior or meeeeouw"
      
    TimesheetResponse:
      type: object
      properties:
        id:
          type: string
          example: "01JRQAZDX24JTBZTTFBDHH1Z7D"
        user:
          type: object
          properties:
            id:
              type: string
              example: "b1lpu5hm"
            email:
              type: string
              example: "thorodinson@thormail.com"
            first_name:
              type: string
              example: "Thor"
            last_name:
              type: string
              example: "Odinson"
            activated:
              type: boolean
              example: true
        project:
          type: object
          properties:
            project_id:
              type: integer
              example: 24403
            name:
              type: string
              example: "123 Ragna Road"
        client:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "Yondu Industry"
        activity:
          type: object
          properties:
            id:
              type: integer
              example: 21
            name:
              type: string
              example: "Design"
        work_date:
          type: string
          example: "2025-01-01"
        work_mins:
          type: integer
          example: 360
        description:
          type: string
          example: "Designing Bifrost"
        status:
          type: string
          example: "active"
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T16:10:55Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-01T16:10:55Z"